# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import game_pb2 as game__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in game_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GameStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewGame = channel.unary_unary(
                '/game.Game/NewGame',
                request_serializer=game__pb2.NewGameRequest.SerializeToString,
                response_deserializer=game__pb2.NewGameReply.FromString,
                _registered_method=True)
        self.ShowAllSessions = channel.unary_stream(
                '/game.Game/ShowAllSessions',
                request_serializer=game__pb2.ShowAllSessionsRequest.SerializeToString,
                response_deserializer=game__pb2.SessionDetailsReply.FromString,
                _registered_method=True)
        self.GetCurrentSession = channel.unary_unary(
                '/game.Game/GetCurrentSession',
                request_serializer=game__pb2.GetCurrentSessionRequest.SerializeToString,
                response_deserializer=game__pb2.SessionDetailsReply.FromString,
                _registered_method=True)
        self.SetCurrentSession = channel.unary_unary(
                '/game.Game/SetCurrentSession',
                request_serializer=game__pb2.SetCurrentSessionRequest.SerializeToString,
                response_deserializer=game__pb2.SessionDetailsReply.FromString,
                _registered_method=True)
        self.GetState = channel.unary_unary(
                '/game.Game/GetState',
                request_serializer=game__pb2.GetStateRequest.SerializeToString,
                response_deserializer=game__pb2.GetStateReply.FromString,
                _registered_method=True)
        self.Step = channel.unary_unary(
                '/game.Game/Step',
                request_serializer=game__pb2.StepRequest.SerializeToString,
                response_deserializer=game__pb2.StepReply.FromString,
                _registered_method=True)
        self.SayHello = channel.unary_unary(
                '/game.Game/SayHello',
                request_serializer=game__pb2.HelloRequest.SerializeToString,
                response_deserializer=game__pb2.HelloReply.FromString,
                _registered_method=True)


class GameServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NewGame(self, request, context):
        """Requests a new game with a specific size. The game is put in a database.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShowAllSessions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCurrentSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Step(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SayHello(self, request, context):
        """Demonstratory function.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewGame': grpc.unary_unary_rpc_method_handler(
                    servicer.NewGame,
                    request_deserializer=game__pb2.NewGameRequest.FromString,
                    response_serializer=game__pb2.NewGameReply.SerializeToString,
            ),
            'ShowAllSessions': grpc.unary_stream_rpc_method_handler(
                    servicer.ShowAllSessions,
                    request_deserializer=game__pb2.ShowAllSessionsRequest.FromString,
                    response_serializer=game__pb2.SessionDetailsReply.SerializeToString,
            ),
            'GetCurrentSession': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentSession,
                    request_deserializer=game__pb2.GetCurrentSessionRequest.FromString,
                    response_serializer=game__pb2.SessionDetailsReply.SerializeToString,
            ),
            'SetCurrentSession': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCurrentSession,
                    request_deserializer=game__pb2.SetCurrentSessionRequest.FromString,
                    response_serializer=game__pb2.SessionDetailsReply.SerializeToString,
            ),
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=game__pb2.GetStateRequest.FromString,
                    response_serializer=game__pb2.GetStateReply.SerializeToString,
            ),
            'Step': grpc.unary_unary_rpc_method_handler(
                    servicer.Step,
                    request_deserializer=game__pb2.StepRequest.FromString,
                    response_serializer=game__pb2.StepReply.SerializeToString,
            ),
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=game__pb2.HelloRequest.FromString,
                    response_serializer=game__pb2.HelloReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'game.Game', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('game.Game', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Game(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NewGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.Game/NewGame',
            game__pb2.NewGameRequest.SerializeToString,
            game__pb2.NewGameReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ShowAllSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/game.Game/ShowAllSessions',
            game__pb2.ShowAllSessionsRequest.SerializeToString,
            game__pb2.SessionDetailsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCurrentSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.Game/GetCurrentSession',
            game__pb2.GetCurrentSessionRequest.SerializeToString,
            game__pb2.SessionDetailsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetCurrentSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.Game/SetCurrentSession',
            game__pb2.SetCurrentSessionRequest.SerializeToString,
            game__pb2.SessionDetailsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.Game/GetState',
            game__pb2.GetStateRequest.SerializeToString,
            game__pb2.GetStateReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Step(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.Game/Step',
            game__pb2.StepRequest.SerializeToString,
            game__pb2.StepReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.Game/SayHello',
            game__pb2.HelloRequest.SerializeToString,
            game__pb2.HelloReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
